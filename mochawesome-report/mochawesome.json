{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-21T07:03:03.148Z",
    "end": "2025-09-21T07:03:03.219Z",
    "duration": 71,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8ef91e80-7a12-4ebf-b95a-4f849f0f3413",
      "title": "",
      "fullFile": "/home/patricia/pgats-2025-02-base/test/rest/user.test.js",
      "file": "/test/rest/user.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9454edad-932f-4ea7-ae72-cc2303f308e5",
          "title": "User Registration and Login  - User Login",
          "fullFile": "/home/patricia/pgats-2025-02-base/test/rest/user.test.js",
          "file": "/test/rest/user.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User Registration and Login  - User Login\"",
              "fullTitle": "User Registration and Login  - User Login \"before each\" hook in \"User Registration and Login  - User Login\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Garante que o usuário existe antes do login\nawait request(app)\n  .post('/api/users/register')\n  .send({\n    name: 'Alice',\n    email: 'alice@email.com',\n    password: '123456'\n  });\n// Faz login e armazena o token\nconst resposta = await request(app)\n  .post('/api/users/login')\n  .send({\n    email: 'alice@email.com',\n    password: '123456'\n  });\ntoken = resposta.body.token;",
              "err": {},
              "uuid": "65d52f7d-991b-4669-8ee7-db16914e1721",
              "parentUUID": "9454edad-932f-4ea7-ae72-cc2303f308e5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "1 - Quando tento registrar um email já cadastrado  resposta email já cadastrado",
              "fullTitle": "User Registration and Login  - User Login 1 - Quando tento registrar um email já cadastrado  resposta email já cadastrado",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post('/api/users/register')\n  .send({\n    name: 'Alice',\n    email: 'alice@email.com',\n    password: '123456'\n  });\nexpect(resposta.body).to.have.property('error', 'Email já cadastrado');",
              "err": {},
              "uuid": "512352a8-74e5-443d-89fe-b792e4334c08",
              "parentUUID": "9454edad-932f-4ea7-ae72-cc2303f308e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2 - Quando registro um novo usuário recebo 201 e os dados ",
              "fullTitle": "User Registration and Login  - User Login 2 - Quando registro um novo usuário recebo 201 e os dados ",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post('/api/users/register')\n  .send({\n    name: 'Charlie',\n    email: 'charlie@gmail.com',\n    password: '123456'\n  });\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body.user).to.have.property('name', 'Charlie');\nexpect(resposta.body.user).to.have.property('email', 'charlie@gmail.com');",
              "err": {},
              "uuid": "7621eb03-6ab4-41d8-b83e-dd10f2f3335c",
              "parentUUID": "9454edad-932f-4ea7-ae72-cc2303f308e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3 - Quando faço login com usuário válido recebo token",
              "fullTitle": "User Registration and Login  - User Login 3 - Quando faço login com usuário válido recebo token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post('/api/users/login')\n  .send({\n    email: 'alice@email.com',\n    password: '123456'\n  });\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('token');",
              "err": {},
              "uuid": "a592f8ed-caa3-47b7-ad54-75c64a308c70",
              "parentUUID": "9454edad-932f-4ea7-ae72-cc2303f308e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4 - Checkout: retorna 200 e valorFinal",
              "fullTitle": "User Registration and Login  - User Login 4 - Checkout: retorna 200 e valorFinal",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post('/api/checkout')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    items: [{ productId: 1, quantity: 2 }],\n    freight: 10,\n    paymentMethod: 'boleto'\n  });\nconsole.log(resposta.body);\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('valorFinal');",
              "err": {},
              "uuid": "546785fa-30b1-444a-a6d3-fd7fba3762e1",
              "parentUUID": "9454edad-932f-4ea7-ae72-cc2303f308e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "512352a8-74e5-443d-89fe-b792e4334c08",
            "7621eb03-6ab4-41d8-b83e-dd10f2f3335c",
            "a592f8ed-caa3-47b7-ad54-75c64a308c70",
            "546785fa-30b1-444a-a6d3-fd7fba3762e1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}