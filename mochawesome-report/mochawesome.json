{
  "stats": {
    "suites": 3,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-21T06:26:50.687Z",
    "end": "2025-09-21T06:26:50.873Z",
    "duration": 186,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "191207af-b0ed-42d4-a2ea-4657c90ea31b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "493f9a70-3c09-49dd-82c2-44ae1e555cc5",
          "title": "User Registration and Login  - Usando api externa",
          "fullFile": "/home/patricia/pgats-2025-02-base/test/graphql/testGraphql.test.js",
          "file": "/test/graphql/testGraphql.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User Registration and Login  - Usando api externa\"",
              "fullTitle": "User Registration and Login  - Usando api externa \"before each\" hook in \"User Registration and Login  - Usando api externa\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Registra o usuário via GraphQL\nawait request(process.env.BASE_URL_GRAPHQL)\n  .post('/graphql')\n  .send({\n    query: `\n      mutation Register($name: String!, $email: String!, $password: String!) {\n        register(name: $name, email: $email, password: $password) {\n          name\n          email\n        }\n      }\n    `,\n    variables: {\n      name: 'Alice',\n      email: 'alice@email.com',\n      password: '123456'\n    }\n  });\n  // Faz login via GraphQL e armazena o token\n  const resposta = await request(process.env.BASE_URL_GRAPHQL)\n    .post('/graphql')\n    .send({\n      query: `\n        mutation Login($email: String!, $password: String!) {\n          login(email: $email, password: $password) {\n            token\n          }\n        }\n      `,\n      variables: {\n        email: 'alice@email.com',\n        password: '123456'\n      }\n    });\n  token = resposta.body.data.login.token;",
              "err": {},
              "uuid": "53de0665-a7ee-4096-882f-b100311c250e",
              "parentUUID": "493f9a70-3c09-49dd-82c2-44ae1e555cc5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "1 - Quando tento registrar um email já cadastrado  resposta email já cadastrado",
              "fullTitle": "User Registration and Login  - Usando api externa 1 - Quando tento registrar um email já cadastrado  resposta email já cadastrado",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(process.env.BASE_URL_GRAPHQL)\n  .post('/graphql')\n  .send({\n  query: `\n    mutation Register($name: String!, $email: String!, $password: String!) {\n      register(name: $name, email: $email, password: $password) {\n        name\n        email\n      }\n    }\n  `,\n  variables: {\n    name: 'Alice',\n    email: 'alice@email.com',\n    password: '123456'\n  }\n});\nexpect(resposta.body.errors[0].message).to.match(/Email já cadastrado/);",
              "err": {},
              "uuid": "9f234ae3-590f-4e0f-8cd0-b5e90030709d",
              "parentUUID": "493f9a70-3c09-49dd-82c2-44ae1e555cc5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2 - Quando faço login com usuário válido recebo token",
              "fullTitle": "User Registration and Login  - Usando api externa 2 - Quando faço login com usuário válido recebo token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(process.env.BASE_URL_GRAPHQL)\n  .post('/graphql')\n  .send({\n    query: `\n      mutation Login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n          token\n        }\n      }\n    `,\n    variables: {\n      email: 'alice@email.com',\n      password: '123456'\n    }\n  });\nexpect(resposta.body.data.login).to.have.property('token');",
              "err": {},
              "uuid": "256fdc86-cd20-4e19-84ca-efbe183b3acf",
              "parentUUID": "493f9a70-3c09-49dd-82c2-44ae1e555cc5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3 - Checkout: retorna 200 e valorFinal",
              "fullTitle": "User Registration and Login  - Usando api externa 3 - Checkout: retorna 200 e valorFinal",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(process.env.BASE_URL_GRAPHQL)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    query: `\n      mutation Checkout($items: [CheckoutItemInput!]!, $freight: Float!, $paymentMethod: String!, $cardData: CardDataInput) {\n        checkout(items: $items, freight: $freight, paymentMethod: $paymentMethod, cardData: $cardData) {\n          valorFinal\n        }\n      }\n    `,\n    variables: {\n      items: [{ productId: 1, quantity: 2 }],\n      freight: 10,\n      paymentMethod: 'boleto'\n    }\n  });\nexpect(resposta.body.data.checkout).to.have.property('valorFinal');",
              "err": {},
              "uuid": "c2d0541c-eb6d-4c29-ae48-608591b7f771",
              "parentUUID": "493f9a70-3c09-49dd-82c2-44ae1e555cc5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4 - Checkout: token inválido",
              "fullTitle": "User Registration and Login  - Usando api externa 4 - Checkout: token inválido",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = ' ';\nconst resposta = await request(process.env.BASE_URL_GRAPHQL)\n.post('/graphql')\n.set('Authorization', `Bearer ${token}`)\n.send({\n  query: `\n    mutation Checkout($items: [CheckoutItemInput!]!, $freight: Float!, $paymentMethod: String!, $cardData: CardDataInput) {\n      checkout(items: $items, freight: $freight, paymentMethod: $paymentMethod, cardData: $cardData) {\n        valorFinal\n      }\n    }\n  `,\n  variables: {\n    items: [{ productId: 1, quantity: 2 }],\n    freight: 10,\n    paymentMethod: 'boleto'\n  }\n});\n    expect(resposta.body.errors[0].message).to.match(/Token inválido/);",
              "err": {},
              "uuid": "ea9802d6-5068-4c2a-8fcf-6e199efc3da6",
              "parentUUID": "493f9a70-3c09-49dd-82c2-44ae1e555cc5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9f234ae3-590f-4e0f-8cd0-b5e90030709d",
            "256fdc86-cd20-4e19-84ca-efbe183b3acf",
            "c2d0541c-eb6d-4c29-ae48-608591b7f771",
            "ea9802d6-5068-4c2a-8fcf-6e199efc3da6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a47af1a6-c08f-44f2-afdc-ad8ed069a25f",
          "title": "User Registration and Login  - User Login",
          "fullFile": "/home/patricia/pgats-2025-02-base/test/rest/user.test.js",
          "file": "/test/rest/user.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User Registration and Login  - User Login\"",
              "fullTitle": "User Registration and Login  - User Login \"before each\" hook in \"User Registration and Login  - User Login\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Garante que o usuário existe antes do login\nawait request(app)\n  .post('/api/users/register')\n  .send({\n    name: 'Alice',\n    email: 'alice@email.com',\n    password: '123456'\n  });\n// Faz login e armazena o token\nconst resposta = await request(app)\n  .post('/api/users/login')\n  .send({\n    email: 'alice@email.com',\n    password: '123456'\n  });\ntoken = resposta.body.token;",
              "err": {},
              "uuid": "cafdcdee-8e03-49b6-988d-f6cf4fc74fe4",
              "parentUUID": "a47af1a6-c08f-44f2-afdc-ad8ed069a25f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "1 - Quando tento registrar um email já cadastrado  resposta email já cadastrado",
              "fullTitle": "User Registration and Login  - User Login 1 - Quando tento registrar um email já cadastrado  resposta email já cadastrado",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post('/api/users/register')\n  .send({\n    name: 'Alice',\n    email: 'alice@email.com',\n    password: '123456'\n  });\nexpect(resposta.body).to.have.property('error', 'Email já cadastrado');",
              "err": {},
              "uuid": "0a52081e-8b95-45e3-bbd6-e83312343d5b",
              "parentUUID": "a47af1a6-c08f-44f2-afdc-ad8ed069a25f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2 - Quando registro um novo usuário recebo 201 e os dados ",
              "fullTitle": "User Registration and Login  - User Login 2 - Quando registro um novo usuário recebo 201 e os dados ",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post('/api/users/register')\n  .send({\n    name: 'Charlie',\n    email: 'charlie@gmail.com',\n    password: '123456'\n  });\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body.user).to.have.property('name', 'Charlie');\nexpect(resposta.body.user).to.have.property('email', 'charlie@gmail.com');",
              "err": {},
              "uuid": "85d9e9b3-0eb3-4433-a3fd-eeb6bcf8780f",
              "parentUUID": "a47af1a6-c08f-44f2-afdc-ad8ed069a25f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3 - Quando faço login com usuário válido recebo token",
              "fullTitle": "User Registration and Login  - User Login 3 - Quando faço login com usuário válido recebo token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post('/api/users/login')\n  .send({\n    email: 'alice@email.com',\n    password: '123456'\n  });\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('token');",
              "err": {},
              "uuid": "2546cf49-8855-4279-b305-989495738cd9",
              "parentUUID": "a47af1a6-c08f-44f2-afdc-ad8ed069a25f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4 - Checkout: retorna 200 e valorFinal",
              "fullTitle": "User Registration and Login  - User Login 4 - Checkout: retorna 200 e valorFinal",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n  .post('/api/checkout')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    items: [{ productId: 1, quantity: 2 }],\n    freight: 10,\n    paymentMethod: 'boleto'\n  });\nconsole.log(resposta.body);\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('valorFinal');",
              "err": {},
              "uuid": "b5ad1630-d5ee-43bd-b5a5-46fbe966e706",
              "parentUUID": "a47af1a6-c08f-44f2-afdc-ad8ed069a25f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a52081e-8b95-45e3-bbd6-e83312343d5b",
            "85d9e9b3-0eb3-4433-a3fd-eeb6bcf8780f",
            "2546cf49-8855-4279-b305-989495738cd9",
            "b5ad1630-d5ee-43bd-b5a5-46fbe966e706"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "92d835fb-423a-4adf-be9a-db51fadcffc9",
          "title": "User Registration and Login  - Usando api externa",
          "fullFile": "/home/patricia/pgats-2025-02-base/test/rest/userExternal.test.js",
          "file": "/test/rest/userExternal.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User Registration and Login  - Usando api externa\"",
              "fullTitle": "User Registration and Login  - Usando api externa \"before each\" hook in \"User Registration and Login  - Usando api externa\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Garante que o usuário existe antes do login\nawait request(process.env.BASE_URL_REST)\n  .post('/api/users/register')\n  .send({\n    name: 'Alice',\n    email: 'alice@email.com',\n    password: '123456'\n  });\n// Faz login e armazena o token\nconst resposta = await request(process.env.BASE_URL_REST)\n  .post('/api/users/login')\n  .send({\n    email: 'alice@email.com',\n    password: '123456'\n  });\ntoken = resposta.body.token;",
              "err": {},
              "uuid": "dde65daa-1e70-4952-b904-d8a91d33971d",
              "parentUUID": "92d835fb-423a-4adf-be9a-db51fadcffc9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "1 - Quando tento registrar um email já cadastrado  resposta email já cadastrado",
              "fullTitle": "User Registration and Login  - Usando api externa 1 - Quando tento registrar um email já cadastrado  resposta email já cadastrado",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(process.env.BASE_URL_REST)\n  .post('/api/users/register')\n  .send({\n    name: 'Alice',\n    email: 'alice@email.com',\n    password: '123456'\n  });\nexpect(resposta.body).to.have.property('error', 'Email já cadastrado');",
              "err": {},
              "uuid": "4eb058a2-eaf4-4d5c-a478-e528bf2798a8",
              "parentUUID": "92d835fb-423a-4adf-be9a-db51fadcffc9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2 - Quando faço login com usuário válido recebo token",
              "fullTitle": "User Registration and Login  - Usando api externa 2 - Quando faço login com usuário válido recebo token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(process.env.BASE_URL_REST)\n  .post('/api/users/login')\n  .send({\n    email: 'alice@email.com',\n    password: '123456'\n  });\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('token');",
              "err": {},
              "uuid": "039a132c-144f-4c23-8b2f-a537349066e4",
              "parentUUID": "92d835fb-423a-4adf-be9a-db51fadcffc9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3 - Checkout: retorna 200 e valorFinal",
              "fullTitle": "User Registration and Login  - Usando api externa 3 - Checkout: retorna 200 e valorFinal",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(process.env.BASE_URL_REST)\n  .post('/api/checkout')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    items: [{ productId: 1, quantity: 2 }],\n    freight: 10,\n    paymentMethod: 'boleto'\n  });\nconsole.log(resposta.body);\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('valorFinal');",
              "err": {},
              "uuid": "8f8c5269-b3a6-4c2f-8d12-98cbdbb3f575",
              "parentUUID": "92d835fb-423a-4adf-be9a-db51fadcffc9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4 - Checkout: token inválido",
              "fullTitle": "User Registration and Login  - Usando api externa 4 - Checkout: token inválido",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = ' ';\nconst resposta = await request(process.env.BASE_URL_REST)\n.post('/api/checkout')\n.set('Authorization', `Bearer ${token}`)\n.send({\n  items: [{ productId: 1, quantity: 2 }],\n  freight: 10,\n  paymentMethod: 'boleto'\n});\n    console.log(resposta.body);\n    expect(resposta.status).to.equal(401);\n    expect(resposta.body).to.have.property('error', 'Token inválido');",
              "err": {},
              "uuid": "411a48fb-bb3b-48e4-bc86-c3ed49b962c4",
              "parentUUID": "92d835fb-423a-4adf-be9a-db51fadcffc9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4eb058a2-eaf4-4d5c-a478-e528bf2798a8",
            "039a132c-144f-4c23-8b2f-a537349066e4",
            "8f8c5269-b3a6-4c2f-8d12-98cbdbb3f575",
            "411a48fb-bb3b-48e4-bc86-c3ed49b962c4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}